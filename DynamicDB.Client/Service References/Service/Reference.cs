//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Compete.DynamicDB.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IDynamicDBService")]
    public interface IDynamicDBService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Insert", ReplyAction="http://tempuri.org/IDynamicDBService/InsertResponse")]
        System.Guid Insert(string database, string collection, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Insert", ReplyAction="http://tempuri.org/IDynamicDBService/InsertResponse")]
        System.Threading.Tasks.Task<System.Guid> InsertAsync(string database, string collection, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Update", ReplyAction="http://tempuri.org/IDynamicDBService/UpdateResponse")]
        bool Update(string database, string collection, System.Guid id, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Update", ReplyAction="http://tempuri.org/IDynamicDBService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(string database, string collection, System.Guid id, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Delete", ReplyAction="http://tempuri.org/IDynamicDBService/DeleteResponse")]
        bool Delete(string database, string collection, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Delete", ReplyAction="http://tempuri.org/IDynamicDBService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(string database, string collection, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Lock", ReplyAction="http://tempuri.org/IDynamicDBService/LockResponse")]
        bool Lock(string database, string collection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Lock", ReplyAction="http://tempuri.org/IDynamicDBService/LockResponse")]
        System.Threading.Tasks.Task<bool> LockAsync(string database, string collection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Unlock", ReplyAction="http://tempuri.org/IDynamicDBService/UnlockResponse")]
        void Unlock(string database, string collection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Unlock", ReplyAction="http://tempuri.org/IDynamicDBService/UnlockResponse")]
        System.Threading.Tasks.Task UnlockAsync(string database, string collection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Get", ReplyAction="http://tempuri.org/IDynamicDBService/GetResponse")]
        byte[] Get(string database, string collection, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Get", ReplyAction="http://tempuri.org/IDynamicDBService/GetResponse")]
        System.Threading.Tasks.Task<byte[]> GetAsync(string database, string collection, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/LoadAll", ReplyAction="http://tempuri.org/IDynamicDBService/LoadAllResponse")]
        byte[] LoadAll(string database, string collection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/LoadAll", ReplyAction="http://tempuri.org/IDynamicDBService/LoadAllResponse")]
        System.Threading.Tasks.Task<byte[]> LoadAllAsync(string database, string collection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Query", ReplyAction="http://tempuri.org/IDynamicDBService/QueryResponse")]
        byte[] Query(string database, string script, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Query", ReplyAction="http://tempuri.org/IDynamicDBService/QueryResponse")]
        System.Threading.Tasks.Task<byte[]> QueryAsync(string database, string script, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/ExecuteNonQuery", ReplyAction="http://tempuri.org/IDynamicDBService/ExecuteNonQueryResponse")]
        int ExecuteNonQuery(string script, string database);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/ExecuteNonQuery", ReplyAction="http://tempuri.org/IDynamicDBService/ExecuteNonQueryResponse")]
        System.Threading.Tasks.Task<int> ExecuteNonQueryAsync(string script, string database);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Execute", ReplyAction="http://tempuri.org/IDynamicDBService/ExecuteResponse")]
        byte[] Execute(string script, string database);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Execute", ReplyAction="http://tempuri.org/IDynamicDBService/ExecuteResponse")]
        System.Threading.Tasks.Task<byte[]> ExecuteAsync(string script, string database);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/CreateProcedure", ReplyAction="http://tempuri.org/IDynamicDBService/CreateProcedureResponse")]
        bool CreateProcedure(string database, string name, string script, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/CreateProcedure", ReplyAction="http://tempuri.org/IDynamicDBService/CreateProcedureResponse")]
        System.Threading.Tasks.Task<bool> CreateProcedureAsync(string database, string name, string script, string language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/DropProcedure", ReplyAction="http://tempuri.org/IDynamicDBService/DropProcedureResponse")]
        bool DropProcedure(string database, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/DropProcedure", ReplyAction="http://tempuri.org/IDynamicDBService/DropProcedureResponse")]
        System.Threading.Tasks.Task<bool> DropProcedureAsync(string database, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/ExecuteProcedure", ReplyAction="http://tempuri.org/IDynamicDBService/ExecuteProcedureResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        Compete.DynamicDB.Service.ExecuteProcedureResponse ExecuteProcedure(Compete.DynamicDB.Service.ExecuteProcedureRequest request);
        
        // CODEGEN: 正在生成消息协定，应为该操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/ExecuteProcedure", ReplyAction="http://tempuri.org/IDynamicDBService/ExecuteProcedureResponse")]
        System.Threading.Tasks.Task<Compete.DynamicDB.Service.ExecuteProcedureResponse> ExecuteProcedureAsync(Compete.DynamicDB.Service.ExecuteProcedureRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/CreateDatabase", ReplyAction="http://tempuri.org/IDynamicDBService/CreateDatabaseResponse")]
        bool CreateDatabase(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/CreateDatabase", ReplyAction="http://tempuri.org/IDynamicDBService/CreateDatabaseResponse")]
        System.Threading.Tasks.Task<bool> CreateDatabaseAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/DropDatabase", ReplyAction="http://tempuri.org/IDynamicDBService/DropDatabaseResponse")]
        bool DropDatabase(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/DropDatabase", ReplyAction="http://tempuri.org/IDynamicDBService/DropDatabaseResponse")]
        System.Threading.Tasks.Task<bool> DropDatabaseAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Save", ReplyAction="http://tempuri.org/IDynamicDBService/SaveResponse")]
        bool Save();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/Save", ReplyAction="http://tempuri.org/IDynamicDBService/SaveResponse")]
        System.Threading.Tasks.Task<bool> SaveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/CreateCollection", ReplyAction="http://tempuri.org/IDynamicDBService/CreateCollectionResponse")]
        bool CreateCollection(string database, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/CreateCollection", ReplyAction="http://tempuri.org/IDynamicDBService/CreateCollectionResponse")]
        System.Threading.Tasks.Task<bool> CreateCollectionAsync(string database, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/DropCollection", ReplyAction="http://tempuri.org/IDynamicDBService/DropCollectionResponse")]
        bool DropCollection(string database, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDynamicDBService/DropCollection", ReplyAction="http://tempuri.org/IDynamicDBService/DropCollectionResponse")]
        System.Threading.Tasks.Task<bool> DropCollectionAsync(string database, string name);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteProcedure", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExecuteProcedureRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string database;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public object[] parameters;
        
        public ExecuteProcedureRequest() {
        }
        
        public ExecuteProcedureRequest(string database, string name, object[] parameters) {
            this.database = database;
            this.name = name;
            this.parameters = parameters;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteProcedureResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExecuteProcedureResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int ExecuteProcedureResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public object result;
        
        public ExecuteProcedureResponse() {
        }
        
        public ExecuteProcedureResponse(int ExecuteProcedureResult, object result) {
            this.ExecuteProcedureResult = ExecuteProcedureResult;
            this.result = result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDynamicDBServiceChannel : Compete.DynamicDB.Service.IDynamicDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DynamicDBServiceClient : System.ServiceModel.ClientBase<Compete.DynamicDB.Service.IDynamicDBService>, Compete.DynamicDB.Service.IDynamicDBService {
        
        public DynamicDBServiceClient() {
        }
        
        public DynamicDBServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DynamicDBServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DynamicDBServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DynamicDBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid Insert(string database, string collection, byte[] data) {
            return base.Channel.Insert(database, collection, data);
        }
        
        public System.Threading.Tasks.Task<System.Guid> InsertAsync(string database, string collection, byte[] data) {
            return base.Channel.InsertAsync(database, collection, data);
        }
        
        public bool Update(string database, string collection, System.Guid id, byte[] data) {
            return base.Channel.Update(database, collection, id, data);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(string database, string collection, System.Guid id, byte[] data) {
            return base.Channel.UpdateAsync(database, collection, id, data);
        }
        
        public bool Delete(string database, string collection, System.Guid id) {
            return base.Channel.Delete(database, collection, id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(string database, string collection, System.Guid id) {
            return base.Channel.DeleteAsync(database, collection, id);
        }
        
        public bool Lock(string database, string collection) {
            return base.Channel.Lock(database, collection);
        }
        
        public System.Threading.Tasks.Task<bool> LockAsync(string database, string collection) {
            return base.Channel.LockAsync(database, collection);
        }
        
        public void Unlock(string database, string collection) {
            base.Channel.Unlock(database, collection);
        }
        
        public System.Threading.Tasks.Task UnlockAsync(string database, string collection) {
            return base.Channel.UnlockAsync(database, collection);
        }
        
        public byte[] Get(string database, string collection, System.Guid id) {
            return base.Channel.Get(database, collection, id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAsync(string database, string collection, System.Guid id) {
            return base.Channel.GetAsync(database, collection, id);
        }
        
        public byte[] LoadAll(string database, string collection) {
            return base.Channel.LoadAll(database, collection);
        }
        
        public System.Threading.Tasks.Task<byte[]> LoadAllAsync(string database, string collection) {
            return base.Channel.LoadAllAsync(database, collection);
        }
        
        public byte[] Query(string database, string script, string language) {
            return base.Channel.Query(database, script, language);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryAsync(string database, string script, string language) {
            return base.Channel.QueryAsync(database, script, language);
        }
        
        public int ExecuteNonQuery(string script, string database) {
            return base.Channel.ExecuteNonQuery(script, database);
        }
        
        public System.Threading.Tasks.Task<int> ExecuteNonQueryAsync(string script, string database) {
            return base.Channel.ExecuteNonQueryAsync(script, database);
        }
        
        public byte[] Execute(string script, string database) {
            return base.Channel.Execute(script, database);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExecuteAsync(string script, string database) {
            return base.Channel.ExecuteAsync(script, database);
        }
        
        public bool CreateProcedure(string database, string name, string script, string language) {
            return base.Channel.CreateProcedure(database, name, script, language);
        }
        
        public System.Threading.Tasks.Task<bool> CreateProcedureAsync(string database, string name, string script, string language) {
            return base.Channel.CreateProcedureAsync(database, name, script, language);
        }
        
        public bool DropProcedure(string database, string name) {
            return base.Channel.DropProcedure(database, name);
        }
        
        public System.Threading.Tasks.Task<bool> DropProcedureAsync(string database, string name) {
            return base.Channel.DropProcedureAsync(database, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Compete.DynamicDB.Service.ExecuteProcedureResponse Compete.DynamicDB.Service.IDynamicDBService.ExecuteProcedure(Compete.DynamicDB.Service.ExecuteProcedureRequest request) {
            return base.Channel.ExecuteProcedure(request);
        }
        
        public int ExecuteProcedure(string database, string name, object[] parameters, out object result) {
            Compete.DynamicDB.Service.ExecuteProcedureRequest inValue = new Compete.DynamicDB.Service.ExecuteProcedureRequest();
            inValue.database = database;
            inValue.name = name;
            inValue.parameters = parameters;
            Compete.DynamicDB.Service.ExecuteProcedureResponse retVal = ((Compete.DynamicDB.Service.IDynamicDBService)(this)).ExecuteProcedure(inValue);
            result = retVal.result;
            return retVal.ExecuteProcedureResult;
        }
        
        public System.Threading.Tasks.Task<Compete.DynamicDB.Service.ExecuteProcedureResponse> ExecuteProcedureAsync(Compete.DynamicDB.Service.ExecuteProcedureRequest request) {
            return base.Channel.ExecuteProcedureAsync(request);
        }
        
        public bool CreateDatabase(string name) {
            return base.Channel.CreateDatabase(name);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDatabaseAsync(string name) {
            return base.Channel.CreateDatabaseAsync(name);
        }
        
        public bool DropDatabase(string name) {
            return base.Channel.DropDatabase(name);
        }
        
        public System.Threading.Tasks.Task<bool> DropDatabaseAsync(string name) {
            return base.Channel.DropDatabaseAsync(name);
        }
        
        public bool Save() {
            return base.Channel.Save();
        }
        
        public System.Threading.Tasks.Task<bool> SaveAsync() {
            return base.Channel.SaveAsync();
        }
        
        public bool CreateCollection(string database, string name) {
            return base.Channel.CreateCollection(database, name);
        }
        
        public System.Threading.Tasks.Task<bool> CreateCollectionAsync(string database, string name) {
            return base.Channel.CreateCollectionAsync(database, name);
        }
        
        public bool DropCollection(string database, string name) {
            return base.Channel.DropCollection(database, name);
        }
        
        public System.Threading.Tasks.Task<bool> DropCollectionAsync(string database, string name) {
            return base.Channel.DropCollectionAsync(database, name);
        }
    }
}
